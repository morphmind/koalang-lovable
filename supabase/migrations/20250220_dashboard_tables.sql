-- Profil tablosu oluşturma (auth.users ile ilişkili)
create table if not exists public.profiles (
    id uuid references auth.users on delete cascade primary key,
    email text,
    username text unique,
    full_name text,
    avatar_url text,
    role text default 'student',
    status text default 'inactive',
    last_sign_in_at timestamp with time zone,
    created_at timestamp with time zone default timezone('utc'::text, now()) not null,
    updated_at timestamp with time zone default timezone('utc'::text, now()) not null
);

-- Tetikleyiciler için güncelleme zamanı fonksiyonu
create or replace function public.handle_updated_at()
returns trigger as $$
begin
    new.updated_at = timezone('utc'::text, now());
    return new;
end;
$$ language plpgsql security definer;

-- Güncelleme zamanı tetikleyicisi - profiller için
do $$ 
begin
    if not exists (select 1 from pg_trigger where tgname = 'handle_profiles_updated_at') then
        create trigger handle_profiles_updated_at
            before update on public.profiles
            for each row
            execute function public.handle_updated_at();
    end if;
end $$;

-- Profiller için RLS politikaları
alter table public.profiles enable row level security;

-- Mevcut politikaları temizle
drop policy if exists "Profiller herkese açık olarak görüntülenebilir" on public.profiles;
drop policy if exists "Kullanıcılar kendi profillerini görüntüleyebilir" on public.profiles;
drop policy if exists "Kullanıcılar kendi profillerini güncelleyebilir" on public.profiles;
drop policy if exists "Adminler tüm profilleri görebilir" on public.profiles;
drop policy if exists "Adminler tüm profilleri yönetebilir" on public.profiles;

-- Temel politikalar
create policy "Herkes profilleri görüntüleyebilir"
    on public.profiles for select
    using (true);

create policy "Kullanıcılar kendi profillerini düzenleyebilir"
    on public.profiles for update
    using (auth.uid() = id)
    with check (auth.uid() = id);

create policy "Adminler profilleri düzenleyebilir"
    on public.profiles for update
    using (
        exists (
            select 1 
            from auth.users 
            where auth.uid() = id 
            and raw_user_meta_data->>'role' = 'admin'
        )
    );

-- Quiz sonuçları tablosu
create table if not exists public.quiz_results (
    id bigint generated by default as identity primary key,
    user_id uuid references public.profiles(id) on delete cascade not null,
    quiz_type text not null,
    total_questions integer not null,
    correct_answers integer not null,
    duration_seconds integer not null,
    created_at timestamp with time zone default timezone('utc'::text, now()) not null
);

-- Quiz sonuçları için RLS politikaları
alter table public.quiz_results enable row level security;

-- Mevcut politikaları temizle
drop policy if exists "Kullanıcılar kendi quiz sonuçlarını görebilir" on public.quiz_results;
drop policy if exists "Kullanıcılar kendi quiz sonuçlarını ekleyebilir" on public.quiz_results;
drop policy if exists "Kullanıcılar kendi quiz sonuçlarını yönetebilir" on public.quiz_results;
drop policy if exists "Adminler tüm quiz sonuçlarını görebilir" on public.quiz_results;
drop policy if exists "Adminler tüm quiz sonuçlarını yönetebilir" on public.quiz_results;

-- Temel politikalar
create policy "Kullanıcılar kendi quiz sonuçlarını yönetebilir"
    on public.quiz_results for all
    using (auth.uid() = user_id)
    with check (auth.uid() = user_id);

create policy "Adminler tüm quiz sonuçlarını yönetebilir"
    on public.quiz_results for all
    using (
        coalesce(
            (select true from public.profiles where id = auth.uid() and role = 'admin'),
            false
        )
    );

-- Egzersiz tablosu
create table if not exists public.exercises (
    id bigint generated by default as identity primary key,
    user_id uuid references public.profiles(id) on delete cascade not null,
    exercise_type text not null,
    title text not null,
    description text,
    completed boolean default false,
    completion_date timestamp with time zone,
    target_completion_date timestamp with time zone,
    created_at timestamp with time zone default timezone('utc'::text, now()) not null,
    updated_at timestamp with time zone default timezone('utc'::text, now()) not null
);

-- Güncelleme zamanı tetikleyicisi - egzersizler için
do $$
begin
    if not exists (select 1 from pg_trigger where tgname = 'handle_exercises_updated_at') then
        create trigger handle_exercises_updated_at
            before update on public.exercises
            for each row
            execute function public.handle_updated_at();
    end if;
end $$;

-- Egzersizler için RLS politikaları
alter table public.exercises enable row level security;

-- Mevcut politikaları temizle
drop policy if exists "Kullanıcılar kendi egzersizlerini görebilir" on public.exercises;
drop policy if exists "Kullanıcılar kendi egzersizlerini yönetebilir" on public.exercises;
drop policy if exists "Adminler tüm egzersizleri görebilir" on public.exercises;
drop policy if exists "Kullanıcılar kendi egzersizlerini yönetebilir" on public.exercises;
drop policy if exists "Adminler tüm egzersizleri yönetebilir" on public.exercises;

-- Temel politikalar
create policy "Kullanıcılar kendi egzersizlerini yönetebilir"
    on public.exercises for all
    using (auth.uid() = user_id)
    with check (auth.uid() = user_id);

create policy "Adminler tüm egzersizleri yönetebilir"
    on public.exercises for all
    using (
        coalesce(
            (select true from public.profiles where id = auth.uid() and role = 'admin'),
            false
        )
    );

-- İndeksler
create index if not exists idx_profiles_role on public.profiles(role);
create index if not exists idx_profiles_created_at on public.profiles(created_at);
create index if not exists idx_quiz_results_user_id on public.quiz_results(user_id);
create index if not exists idx_quiz_results_created_at on public.quiz_results(created_at);
create index if not exists idx_exercises_user_id on public.exercises(user_id);
create index if not exists idx_exercises_completed on public.exercises(completed);
